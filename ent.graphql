directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateTest01Input is used for create Test01 object.
Input was generated by ent.
"""
input CreateTest01Input {
  text: String!
  createdAt: Time
  updateAt: Time
  status: Test01Status
  priority: Int
  parentID: ID
  childIDs: [ID!]
}
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  text: String!
  createdAt: Time
  updateAt: Time
  status: TodoStatus
  priority: Int
  userID: ID
  parentID: ID
  childIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "ginent/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  test01s(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Test01s returned from the connection."""
    orderBy: [Test01Order!]
  ): Test01Connection!
  todos(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Todos returned from the connection."""
    orderBy: [TodoOrder!]
  ): TodoConnection!
}
type Test01 implements Node {
  id: ID!
  text: String!
  createdAt: Time!
  updateAt: Time!
  status: Test01Status!
  priority: Int!
  parent: Test01
  children: [Test01!]
}
"""A connection to a list of items."""
type Test01Connection {
  """A list of edges."""
  edges: [Test01Edge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type Test01Edge {
  """The item at the end of the edge."""
  node: Test01
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Test01 connections"""
input Test01Order {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Test01s."""
  field: Test01OrderField!
}
"""Properties by which Test01 connections can be ordered."""
enum Test01OrderField {
  TEXT
  CREATED_AT
  UPDATE_AT
  STATUS
  PRIORITY
  PARENT_PRIORITY
}
"""Test01Status is enum for the field status"""
enum Test01Status @goModel(model: "ginent/ent/test01.Status") {
  IN_PROGRESS
  COMPLETED
}
"""The builtin Time type"""
scalar Time
type Todo implements Node {
  id: ID!
  text: String!
  createdAt: Time!
  updateAt: Time!
  status: TodoStatus!
  priority: Int!
  user: User
  parent: Todo
  children: [Todo!]
}
"""A connection to a list of items."""
type TodoConnection {
  """A list of edges."""
  edges: [TodoEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge."""
  node: Todo
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Todo connections"""
input TodoOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Todos."""
  field: TodoOrderField!
}
"""Properties by which Todo connections can be ordered."""
enum TodoOrderField {
  TEXT
  CREATED_AT
  UPDATE_AT
  STATUS
  PRIORITY
  PARENT_PRIORITY
}
"""TodoStatus is enum for the field status"""
enum TodoStatus @goModel(model: "ginent/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
type User implements Node {
  id: ID!
  name: String!
  todos: [Todo!]
}
