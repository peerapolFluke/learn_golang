// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pumy2517/ginent/ent/test01"
)

// Test01 is the model entity for the Test01 schema.
type Test01 struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Status holds the value of the "status" field.
	Status test01.Status `json:"status,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Test01Query when eager-loading is set.
	Edges           Test01Edges `json:"edges"`
	test01_children *int
	selectValues    sql.SelectValues
}

// Test01Edges holds the relations/edges for other nodes in the graph.
type Test01Edges struct {
	// Parent holds the value of the parent edge.
	Parent *Test01 `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Test01 `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedChildren map[string][]*Test01
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Test01Edges) ParentOrErr() (*Test01, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: test01.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e Test01Edges) ChildrenOrErr() ([]*Test01, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Test01) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case test01.FieldID, test01.FieldPriority:
			values[i] = new(sql.NullInt64)
		case test01.FieldText, test01.FieldStatus:
			values[i] = new(sql.NullString)
		case test01.FieldCreatedAt, test01.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		case test01.ForeignKeys[0]: // test01_children
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Test01 fields.
func (t *Test01) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case test01.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case test01.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				t.Text = value.String
			}
		case test01.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case test01.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				t.UpdateAt = value.Time
			}
		case test01.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = test01.Status(value.String)
			}
		case test01.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				t.Priority = int(value.Int64)
			}
		case test01.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field test01_children", value)
			} else if value.Valid {
				t.test01_children = new(int)
				*t.test01_children = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Test01.
// This includes values selected through modifiers, order, etc.
func (t *Test01) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Test01 entity.
func (t *Test01) QueryParent() *Test01Query {
	return NewTest01Client(t.config).QueryParent(t)
}

// QueryChildren queries the "children" edge of the Test01 entity.
func (t *Test01) QueryChildren() *Test01Query {
	return NewTest01Client(t.config).QueryChildren(t)
}

// Update returns a builder for updating this Test01.
// Note that you need to call Test01.Unwrap() before calling this method if this Test01
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Test01) Update() *Test01UpdateOne {
	return NewTest01Client(t.config).UpdateOne(t)
}

// Unwrap unwraps the Test01 entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Test01) Unwrap() *Test01 {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Test01 is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Test01) String() string {
	var builder strings.Builder
	builder.WriteString("Test01(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("text=")
	builder.WriteString(t.Text)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(t.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", t.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Test01) NamedChildren(name string) ([]*Test01, error) {
	if t.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Test01) appendNamedChildren(name string, edges ...*Test01) {
	if t.Edges.namedChildren == nil {
		t.Edges.namedChildren = make(map[string][]*Test01)
	}
	if len(edges) == 0 {
		t.Edges.namedChildren[name] = []*Test01{}
	} else {
		t.Edges.namedChildren[name] = append(t.Edges.namedChildren[name], edges...)
	}
}

// Test01s is a parsable slice of Test01.
type Test01s []*Test01
