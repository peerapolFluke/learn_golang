// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pumy2517/ginent/ent/predicate"
	"github.com/pumy2517/ginent/ent/test01"
)

// Test01Delete is the builder for deleting a Test01 entity.
type Test01Delete struct {
	config
	hooks    []Hook
	mutation *Test01Mutation
}

// Where appends a list predicates to the Test01Delete builder.
func (t *Test01Delete) Where(ps ...predicate.Test01) *Test01Delete {
	t.mutation.Where(ps...)
	return t
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (t *Test01Delete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, t.sqlExec, t.mutation, t.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (t *Test01Delete) ExecX(ctx context.Context) int {
	n, err := t.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (t *Test01Delete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(test01.Table, sqlgraph.NewFieldSpec(test01.FieldID, field.TypeInt))
	if ps := t.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, t.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	t.mutation.done = true
	return affected, err
}

// Test01DeleteOne is the builder for deleting a single Test01 entity.
type Test01DeleteOne struct {
	t *Test01Delete
}

// Where appends a list predicates to the Test01Delete builder.
func (to *Test01DeleteOne) Where(ps ...predicate.Test01) *Test01DeleteOne {
	to.t.mutation.Where(ps...)
	return to
}

// Exec executes the deletion query.
func (to *Test01DeleteOne) Exec(ctx context.Context) error {
	n, err := to.t.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{test01.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (to *Test01DeleteOne) ExecX(ctx context.Context) {
	if err := to.Exec(ctx); err != nil {
		panic(err)
	}
}
